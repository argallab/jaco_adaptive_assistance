#!/usr/bin/env python
""" This is a simple node that publishes useful robot state information for robot velocity dampening.
	Listens to kinova's tool_pose to track the robot's pose.

	SUBSCRIBERS:
		j2s7s300_driver/out/tool_pose (PoseStamped) - pose of EE

	PUBLISHERS:
		damp_state (DampState) - publishes state of whether robot is in the dampening zone or not

"""
import rospy
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import (
	DampState,
	Empty, EmptyResponse)

def DampeningZone(object):
	"""
		Keeps track of useful robot pose information and uses that to create a dampening zone to keep the robot from eg. table collisions
	"""
	def __init__(self):
		rospy.Subscriber('j2s7s300_driver/out/tool_pose', PoseStamped, tool_pose_callback)
		self.pub = rospy.Publisher('damp_state', DampState, queue_size=10)
		self.damp_state = DampState()
		self.in_damp_zone = False
		self.count = 0
		self.h_thresh = 0.1		#- height in meters
		
		# self.stopped = False
		# self.stopsrv = rospy.Service('stop_damp_zone', Empty, self.stop_callback)

	def tool_pose_callback(self, msg):
		"""
			This is a callback for subscribing to kinova's tool_pose
			
			Args:
				pose (position & orientation)
		"""
		self.z_ee = msg.pose.position.z_ee

		#== TODO: move somewhere else?
		if (is_in_damp_zone()):
			self.in_damp_zone = True
			self.damp_state = DampState(
				name=rospy.get_name(),
				in_damp_zone=self.in_damp_zone)
				# count=self.count)	
		else:
			self.in_damp_zone = False
			# self.count += 1
			self.damp_state = DampState(
				name=rospy.get_name(),
				in_damp_zone=self.in_damp_zone)
				# count=self.count)
			
		self.pub.publish(self.damp_state)

	def is_in_damp_zone(self):
		return self.z_ee < self.h_thresh

	# def stop_callback(self, req):
	# 	"""
	# 		Stops the publisher from publishing
	# 	"""
	# 	self.stopped = not self.stopped
	# 	return EmptyResponse()

	# def _time_stamp(self):
    #     return rospy.get_time() - self._start_time

	def get_damp_state(self):
		return self.damp_state

def main():
	rospy.init_node('dampening_zone', anonymous=True)
	dz = DampeningZone()
	rospy.spin()

if __name__ == "__main__":
	try:
		main()
	except rospy.ROSInterruptException:
		pass